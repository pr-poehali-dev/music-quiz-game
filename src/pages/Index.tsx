import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import Icon from "@/components/ui/icon";

interface Question {
  id: number;
  artist: string;
  song: string;
  options: string[];
  correct: number;
  explanation: string;
}

const questions: Question[] = [
  {
    id: 1,
    artist: "–ë–∞—Å—Ç–∞",
    song: "–°–∞–Ω—Å–∞—Ä–∞",
    options: [
      "–°—Ç–∞—Ç—å—è 228 –£–ö –†–§ (–ù–µ–∑–∞–∫–æ–Ω–Ω—ã–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ, —Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤)",
      "–°—Ç–∞—Ç—å—è 213 –£–ö –†–§ (–•—É–ª–∏–≥–∞–Ω—Å—Ç–≤–æ)",
      "–°—Ç–∞—Ç—å—è 282 –£–ö –†–§ (–í–æ–∑–±—É–∂–¥–µ–Ω–∏–µ –Ω–µ–Ω–∞–≤–∏—Å—Ç–∏ –ª–∏–±–æ –≤—Ä–∞–∂–¥—ã)",
      "–°—Ç–∞—Ç—å—è 318 –£–ö –†–§ (–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å–∏–ª–∏—è –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –≤–ª–∞—Å—Ç–∏)",
    ],
    correct: 0,
    explanation: "–í —Ç–µ–∫—Å—Ç–µ –ø–µ—Å–Ω–∏ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏–µ –≤–µ—â–µ—Å—Ç–≤–∞",
  },
  {
    id: 2,
    artist: "–û–∫—Å–∏–º–∏—Ä–æ–Ω",
    song: "–ì–æ—Ä–æ–¥ –ø–æ–¥ –ø–æ–¥–æ—à–≤–æ–π",
    options: [
      "–°—Ç–∞—Ç—å—è 280 –£–ö –†–§ (–ü—É–±–ª–∏—á–Ω—ã–µ –ø—Ä–∏–∑—ã–≤—ã –∫ —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)",
      "–°—Ç–∞—Ç—å—è 319 –£–ö –†–§ (–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –≤–ª–∞—Å—Ç–∏)",
      "–°—Ç–∞—Ç—å—è 130 –£–ö –†–§ (–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ)",
      "–°—Ç–∞—Ç—å—è 213 –£–ö –†–§ (–•—É–ª–∏–≥–∞–Ω—Å—Ç–≤–æ)",
    ],
    correct: 1,
    explanation: "–°–æ–¥–µ—Ä–∂–∏—Ç –∫—Ä–∏—Ç–∏–∫—É –≤ –∞–¥—Ä–µ—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π –≤–ª–∞—Å—Ç–∏",
  },
  {
    id: 3,
    artist: "–í–∏—Ç—è –ê–ö",
    song: "–î–µ–ª–∞—é –º—É–∑—ã–∫—É",
    options: [
      "–°—Ç–∞—Ç—å—è 228 –£–ö –†–§ (–ù–µ–∑–∞–∫–æ–Ω–Ω—ã–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ, —Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤)",
      "–°—Ç–∞—Ç—å—è 282 –£–ö –†–§ (–í–æ–∑–±—É–∂–¥–µ–Ω–∏–µ –Ω–µ–Ω–∞–≤–∏—Å—Ç–∏ –ª–∏–±–æ –≤—Ä–∞–∂–¥—ã)",
      "–°—Ç–∞—Ç—å—è 213 –£–ö –†–§ (–•—É–ª–∏–≥–∞–Ω—Å—Ç–≤–æ)",
      "–°—Ç–∞—Ç—å—è 167 –£–ö –†–§ (–£–º—ã—à–ª–µ–Ω–Ω—ã–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ –∏–º—É—â–µ—Å—Ç–≤–∞)",
    ],
    correct: 2,
    explanation: "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è –∏ –ø—Ä–∏–∑—ã–≤—ã –∫ –±–µ—Å–ø–æ—Ä—è–¥–∫–∞–º",
  },
  {
    id: 4,
    artist: "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã",
    song: "–†–æ–ª–ª—Ç–æ–Ω",
    options: [
      "–°—Ç–∞—Ç—å—è 319 –£–ö –†–§ (–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –≤–ª–∞—Å—Ç–∏)",
      "–°—Ç–∞—Ç—å—è 228 –£–ö –†–§ (–ù–µ–∑–∞–∫–æ–Ω–Ω—ã–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ, —Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤)",
      "–°—Ç–∞—Ç—å—è 282 –£–ö –†–§ (–í–æ–∑–±—É–∂–¥–µ–Ω–∏–µ –Ω–µ–Ω–∞–≤–∏—Å—Ç–∏ –ª–∏–±–æ –≤—Ä–∞–∂–¥—ã)",
      "–°—Ç–∞—Ç—å—è 213 –£–ö –†–§ (–•—É–ª–∏–≥–∞–Ω—Å—Ç–≤–æ)",
    ],
    correct: 1,
    explanation: "–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤ –≤ —Ç–µ–∫—Å—Ç–µ",
  },
  {
    id: 5,
    artist: "–ú–æ—Ä–≥–µ–Ω—à—Ç–µ—Ä–Ω",
    song: "Cadillac",
    options: [
      "–°—Ç–∞—Ç—å—è 213 –£–ö –†–§ (–•—É–ª–∏–≥–∞–Ω—Å—Ç–≤–æ)",
      "–°—Ç–∞—Ç—å—è 282 –£–ö –†–§ (–í–æ–∑–±—É–∂–¥–µ–Ω–∏–µ –Ω–µ–Ω–∞–≤–∏—Å—Ç–∏ –ª–∏–±–æ –≤—Ä–∞–∂–¥—ã)",
      "–°—Ç–∞—Ç—å—è 228 –£–ö –†–§ (–ù–µ–∑–∞–∫–æ–Ω–Ω—ã–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ, —Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤)",
      "–°—Ç–∞—Ç—å—è 319 –£–ö –†–§ (–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –≤–ª–∞—Å—Ç–∏)",
    ],
    correct: 2,
    explanation: "–ü—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏—Ö –≤–µ—â–µ—Å—Ç–≤ –≤ –∫–ª–∏–ø–µ –∏ —Ç–µ–∫—Å—Ç–µ",
  },
];

export default function Index() {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [score, setScore] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null);
  const [showResult, setShowResult] = useState(false);
  const [gameStarted, setGameStarted] = useState(false);
  const [showExplanation, setShowExplanation] = useState(false);

  const handleAnswerSelect = (answerIndex: number) => {
    setSelectedAnswer(answerIndex);
  };

  const handleNextQuestion = () => {
    if (selectedAnswer === questions[currentQuestion].correct) {
      setScore(score + 1);
    }

    if (currentQuestion + 1 < questions.length) {
      setCurrentQuestion(currentQuestion + 1);
      setSelectedAnswer(null);
      setShowExplanation(false);
    } else {
      setShowResult(true);
    }
  };

  const restartQuiz = () => {
    setCurrentQuestion(0);
    setScore(0);
    setSelectedAnswer(null);
    setShowResult(false);
    setGameStarted(false);
    setShowExplanation(false);
  };

  const showAnswer = () => {
    setShowExplanation(true);
  };

  if (!gameStarted) {
    return (
      <div className="min-h-screen flex items-center justify-center p-4">
        <Card className="w-full max-w-2xl bg-black/40 backdrop-blur-lg border-purple-500/30">
          <CardHeader className="text-center">
            <div className="flex justify-center mb-4">
              <Icon name="Music" size={64} className="text-purple-400" />
            </div>
            <CardTitle className="text-4xl font-bold text-white mb-4">
              üéµ –ú—É–∑—ã–∫–∞–ª—å–Ω–∞—è –í–∏–∫—Ç–æ—Ä–∏–Ω–∞
            </CardTitle>
            <p className="text-xl text-purple-200 mb-6">
              –£–≥–∞–¥–∞–π, –∫–∞–∫—É—é —Å—Ç–∞—Ç—å—é –£–ö –†–§ –Ω–∞—Ä—É—à–∞—é—Ç –≤ –ø–µ—Å–Ω—è—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ä—ç–ø–µ—Ä–æ–≤
            </p>
            <div className="text-sm text-gray-300 space-y-2">
              <p>
                ‚Ä¢ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –ø–µ—Å–Ω—è—Ö –ë–∞—Å—Ç—ã, –û–∫—Å–∏–º–∏—Ä–æ–Ω–∞, –í–∏—Ç–∏ –ê–ö, –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏
                –ú–æ—Ä–≥–µ–Ω—à—Ç–µ—Ä–Ω–∞
              </p>
              <p>‚Ä¢ –í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç–∞—Ç—å—é –∏–∑ 4 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤</p>
              <p>‚Ä¢ –£–∑–Ω–∞–π —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Ü–µ!</p>
            </div>
          </CardHeader>
          <CardContent className="text-center">
            <Button
              onClick={() => setGameStarted(true)}
              className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white px-8 py-3 text-lg"
            >
              <Icon name="Play" className="mr-2" />
              –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (showResult) {
    const percentage = Math.round((score / questions.length) * 100);
    let resultMessage = "";
    let resultColor = "";

    if (percentage >= 80) {
      resultMessage = "–û—Ç–ª–∏—á–Ω–æ! –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –∑–Ω–∞—Ç–æ–∫ –º—É–∑—ã–∫–∏ –∏ –ø—Ä–∞–≤–∞! üèÜ";
      resultColor = "text-green-400";
    } else if (percentage >= 60) {
      resultMessage = "–•–æ—Ä–æ—à–æ! –ù–µ–ø–ª–æ—Ö–æ–µ –∑–Ω–∞–Ω–∏–µ —Ç–µ–º—ã! üëç";
      resultColor = "text-yellow-400";
    } else {
      resultMessage = "–°—Ç–æ–∏—Ç –ø–æ–¥—É—á–∏—Ç—å –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ! üìö";
      resultColor = "text-red-400";
    }

    return (
      <div className="min-h-screen flex items-center justify-center p-4">
        <Card className="w-full max-w-2xl bg-black/40 backdrop-blur-lg border-purple-500/30">
          <CardHeader className="text-center">
            <div className="flex justify-center mb-4">
              <Icon name="Trophy" size={64} className="text-yellow-400" />
            </div>
            <CardTitle className="text-3xl font-bold text-white mb-4">
              –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
            </CardTitle>
            <div className="text-6xl font-bold text-purple-400 mb-4">
              {score}/{questions.length}
            </div>
            <p className={`text-xl mb-6 ${resultColor}`}>{resultMessage}</p>
            <div className="w-full bg-gray-700 rounded-full h-4 mb-6">
              <div
                className="bg-gradient-to-r from-purple-600 to-pink-600 h-4 rounded-full transition-all duration-1000"
                style={{ width: `${percentage}%` }}
              ></div>
            </div>
            <p className="text-gray-300">–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {percentage}%</p>
          </CardHeader>
          <CardContent className="text-center">
            <Button
              onClick={restartQuiz}
              className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white px-8 py-3"
            >
              <Icon name="RotateCcw" className="mr-2" />
              –ü—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  const current = questions[currentQuestion];

  return (
    <div className="min-h-screen flex items-center justify-center p-4">
      <Card className="w-full max-w-3xl bg-black/40 backdrop-blur-lg border-purple-500/30">
        <CardHeader>
          <div className="flex justify-between items-center mb-4">
            <div className="text-purple-400 font-semibold">
              –í–æ–ø—Ä–æ—Å {currentQuestion + 1} –∏–∑ {questions.length}
            </div>
            <div className="text-purple-400 font-semibold">–û—á–∫–∏: {score}</div>
          </div>
          <Progress
            value={((currentQuestion + 1) / questions.length) * 100}
            className="mb-6"
          />

          <div className="text-center mb-6">
            <div className="flex justify-center mb-4">
              <Icon name="Music" size={48} className="text-purple-400" />
            </div>
            <CardTitle className="text-2xl font-bold text-white mb-2">
              {current.artist} - "{current.song}"
            </CardTitle>
            <p className="text-gray-300">
              –ö–∞–∫—É—é —Å—Ç–∞—Ç—å—é –£–ö –†–§ –Ω–∞—Ä—É—à–∞—é—Ç –≤ —ç—Ç–æ–π –ø–µ—Å–Ω–µ?
            </p>
          </div>
        </CardHeader>

        <CardContent>
          <div className="space-y-3 mb-6">
            {current.options.map((option, index) => (
              <button
                key={index}
                onClick={() => handleAnswerSelect(index)}
                className={`w-full p-4 text-left rounded-lg border transition-all duration-200 ${
                  selectedAnswer === index
                    ? showExplanation
                      ? index === current.correct
                        ? "bg-green-500/20 border-green-500 text-green-300"
                        : "bg-red-500/20 border-red-500 text-red-300"
                      : "bg-purple-500/20 border-purple-500 text-purple-300"
                    : showExplanation && index === current.correct
                      ? "bg-green-500/20 border-green-500 text-green-300"
                      : "bg-gray-800/50 border-gray-600 text-gray-300 hover:bg-gray-700/50"
                }`}
                disabled={showExplanation}
              >
                <span className="font-semibold mr-3">
                  {String.fromCharCode(65 + index)}.
                </span>
                {option}
              </button>
            ))}
          </div>

          {showExplanation && (
            <div className="mb-6 p-4 bg-blue-500/20 border border-blue-500/30 rounded-lg">
              <p className="text-blue-300">
                <Icon name="Info" className="inline mr-2" />
                {current.explanation}
              </p>
            </div>
          )}

          <div className="flex justify-center space-x-4">
            {selectedAnswer !== null && !showExplanation && (
              <Button
                onClick={showAnswer}
                variant="outline"
                className="border-purple-500 text-purple-300 hover:bg-purple-500/20"
              >
                <Icon name="Eye" className="mr-2" />
                –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç
              </Button>
            )}

            {showExplanation && (
              <Button
                onClick={handleNextQuestion}
                className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white px-8"
              >
                {currentQuestion + 1 < questions.length ? (
                  <>
                    –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
                    <Icon name="ArrowRight" className="ml-2" />
                  </>
                ) : (
                  <>
                    –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    <Icon name="Trophy" className="ml-2" />
                  </>
                )}
              </Button>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
